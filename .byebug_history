exit
router.routes
exit
scope
c
opts
exit
opts
exit
opts
scope
exit
c
prc.__id__
prc.instance_values
prc.to_json
prc.with_options
prc.instance_variables
prc.present?
prc.methods
prc.super_method
prc.class.class.variables
prc.class.class
prc.class
prc.name
prc.source_location
prc.inspect
prc.arity
prc.parameters
prc = Proc.new
exit
yield.parameters
local_variables
iterator?
self.parameters
parameters
hash
c
hash
c
hash
c
hash
clone(__method__).receiver
send __method__.receiver
__method__.receiver
receiver
__method__
__callee__
exit
router.routes
exit
__callee__
hash
var local
c
hash
var local
c
hash
var local
c
hash
var local
exit
router.routes
c
exit
hash
var local
c
hash
hash.keys
hash.inspect
hash
binding.local_variables
binding.receiver
binding
var local
__callee__
c
__callee__
exit
c
var local
__callee__
exit
__callee__
c
exit
c
block_given?
__callee__
c
block_given?
__callee__
c
__callee__
exit
caller(1,1)
block_given?
exit
block_given?
c
block_given?
caller
binding.local_variables
binding.receiver
binding
exit
caller(1, 1)
caller(1, 1))
caller(1)
__callee__
binding.local_variables
binding.receiver
binding
caller[0]
caller
exit
router.routes
exit
router.routes
c
n
route_params
res
req
n
pattern_match[:cat_id]
pattern_match[cat_id]
pattern_match.names
pattern_match.name
n
pattern_match = @pattern.match(req.path)
@pattern
exit
match(req).run(req, res)
res
match(req)
req
c
router.routes
c
router.routes
c
router.routes
exit
router.routes
router
exit
router.routes
router
exit
router
c
suffix
@noun
base
c
controller_actions.actions
resource.pattern
exit
resource.pattern
resource.pattern.class
c
resource.pattern =~ "/cats"
resource.pattern.class
resource.pattern
exit
c
_
c
Regexp.new(base + @noun + @suffix)
var instance
var
s
n
block_given?
controller_actions.actions
